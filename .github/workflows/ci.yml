name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

# 並行実行の制御
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# 共通の環境変数
env:
  NODE_VERSION: '20.x'
  PYTHON_VERSION: '3.13'

jobs:
  # コード品質チェック
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --report-unused-disable-directives --max-warnings 0
        working-directory: packages/components
        continue-on-error: true

      - name: Check TypeScript
        run: npx tsc --noEmit
        working-directory: packages/components

  # セキュリティチェック
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # コンポーネントテスト
  test-components:
    name: Component Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/components

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ github.workspace }}

      - name: Run tests with coverage
        run: npm test -- --watchAll=false --coverage

      - name: Build
        run: npm run build

  # ビジュアルテスト
  test-visual:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/components

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Cache visual test baselines
        uses: actions/cache@v4
        with:
          path: packages/components/screenshots/baseline
          key: visual-baselines-${{ hashFiles('packages/components/screenshots/baseline/**') }}
          restore-keys: |
            visual-baselines-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci
        working-directory: ${{ github.workspace }}

      - name: Get installed Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.version }}

      - name: Install fonts for consistent rendering
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto-cjk fonts-liberation
          fc-cache -f -v

      - name: Install Playwright Browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps chromium

      - name: Install Playwright system dependencies
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: Run visual tests
        run: npm run test:visual

      - name: Upload visual test report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-test-report
          path: packages/components/visual-test-report/
          retention-days: 30

      - name: Upload visual test diff images
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: visual-test-diff
          path: packages/components/screenshots/diff/
          retention-days: 7

  # MCPサーバーテスト
  test-mcp-server:
    name: MCP Server Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: packages/mcp-server

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: uv sync

      - name: Run tests with coverage
        run: uv run pytest --cov=src --cov-report=term

      - name: Run linting
        run: |
          uv run ruff check src tests
          uv run mypy src
        continue-on-error: true

  # 統合チェック（すべてのテストが成功したことを確認）
  check-all:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, security, test-components, test-visual, test-mcp-server]
    if: always()
    steps:
      - name: Check results
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "One or more checks failed"
            exit 1
          fi
          echo "All checks passed!"

  # Storybookのビルドとデプロイ
  build-storybook:
    name: Build Storybook
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [check-all]
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Cache node_modules
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook
        working-directory: packages/components

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./packages/components/storybook-static

  deploy-storybook:
    name: Deploy Storybook
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-storybook
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

